
A:-swayamvar

number_of_brides_and_grooms = int(input())
brides = input()
grooms = input()
i = 0
while i < number_of_brides_and_grooms:
    index = grooms.find(brides[0])
    if index < 0:
        break
    grooms = grooms[index+1:]+grooms[:index]
    brides = brides[1:]
    i += 1
print(len(brides),end="")





B:-Digit pairs

#include<iostream>

using namespace std;

int bit_score(int n) {
 int a, b, c, largest, smallest;
 int score;

 a = n%10; n/=10;
 b = n%10; n/=10;
 c = n%10; n/=10;

 largest = (a>b)?a:b;
 largest = (c>largest)?c:largest;
 smallest = (a<b)?a:b;
 smallest = (c<smallest)?c:smallest;

 score = largest*11 + smallest*7;

 score = score % 100;
 return score;
}

int findPairs (int score_array[], int N) {
 int sig_dig[10], i, pairs = 0, msb;

 for(i=0; i<10; i++) {
  sig_dig[i] = 0;
 }

 for(i=0; i<N; i=i+2) {
  msb = score_array[i] / 10;
        for(int j =i+2; j<N; j=j+2){
            if(msb == score_array[j]/10){
                if(sig_dig[msb] < 2) {
           sig_dig[msb]++;
          }
            }
        }
  
 }
    
    for(i=1; i<N; i=i+2) {
  msb = score_array[i] / 10;
  for(int j =i+2; j<N; j=j+2){
            if(msb == score_array[j]/10){
                if(sig_dig[msb] < 2) {
           sig_dig[msb]++;
          }
            }
        }
 }

 for(i=0; i<10; i++) {
  pairs = pairs + sig_dig[i];
 }

 return pairs;
}


int main() {

 int N, i;
 int ip_array[501];
 int score_array[501];
 int pairs;
 cin>>N;

 for(i=0; i<N; i++) {
  cin>>ip_array[i];
 }

 for(i=0; i<N; i++) {
  score_array[i] = bit_score(ip_array[i]);
 }

 pairs = findPairs(score_array, N);
 cout<<pairs;

 return 0;
}







C:-Dole out cadbary

#include<stdio.h>
int no_of_children(int row, int col)
{
    int count=0;
    int total = row * col;
    while(row && col)
    {
        count++;
        if(row>col)
            row = row - col;
        else
            col = col - row;
    }
    return count;
}
int main()
{
    int sum=0;
    int minlen,maxlen,minwid,maxwid;
    scanf("%d\n%d\n%d\n%d",&minlen,&maxlen,&minwid,&maxwid);
    if(0<minlen<1501 && 0<maxlen<1501 && 0<minwid<1501 && 0<maxwid<1501)
    {
        for(int i=minlen;i<=maxlen;i++)
        {
            for(int j=minwid;j<=maxwid;j++)
            {
                sum = sum + no_of_children(i,j);
            }
        }
        printf("%d",sum);
    }
    return 0;
}






D:petrol pumps

#include <stdio.h>
int main(void) {
    int n=0, x, i, j, s = 0;
    int a[51];
    while((scanf("%d",&x))!=-1)
    {
        a[n++]=x;
        s += x;
    }
    int d[n+1][s+1];
    for(i=0 ; i<=n ; ++i)
        d[i][0] = 1;
    for(i=1 ; i<=s ; ++i)
        d[0][i] = 0;

    for(i=1 ; i<=n ; ++i)
        for(j=1 ; j<=s ; ++j)
        {
            d[i][j] = d[i-1][j];

            if(a[i-1] <= j)
                d[i][j] = d[i][j] | d[i-1][j - a[i-1]];
        }
    int an = s;
    for(i=s/2 ; i>=0 ; --i)
        if(d[n][i])
        {
            an = s - i;
            break;
        }
    printf("%d",an);
 return 0;
}






E:-Grooving monkeys

#include<stdio.h>
long long int gcd(long long int a,long long int b)
{
  if(b==0)
    return a;
  else
    return gcd(b,a%b);
}
int main()
{
  long long int t,n,i,res,c,temp,temp1;
  scanf("%lld",&t);
  while(t--)
  {
    scanf("%lld",&n);
    long long int a[n];
    for(i=0;i<n;i++)
      scanf("%lld",&a[i]);
    i=0;
    res=1;
    c=0;
    while(i<=n-1)
    {
      temp1=i;
      c=0;
      while(a[i]!=0)
      {
        temp=i;//4
        i=a[i]-1;//0
        a[temp]=0;//0
        c+=1;//3
      }
      i=temp1+1;
      if(c!=0)
        res=res*c/gcd(res,c);
    }
    printf("%lld\n",res);
  }
  return 0;
}
//groovingMonkey






F:-Death battle

from math import gcd,factorial
def ncr(n,r):
    return factorial(n)/(factorial(n-r)*(factorial(r)))
for i in range(int(input())):
    a,h,l1,l2,m,c = [int(i) for i in input().split()]
    num = 0
    den = pow(l2,m)
    if m*(a+c) < h:
        print("RIP")
    else:
        k,z = 0,m*a
        while z < h:
            z += c
            k += 1
        for i in range(k,m+1):
            if i == 0:
                num += pow(l2 - l1,m)
            elif i == m:
                num += pow(l1,i)
            else:
                num += (pow(l1,i)*pow(l2-l1,m-i)*ncr(m,i))
        x = gcd(int(num),den)
        print(str(int(num/x))+"/"+str(int(den/x)))